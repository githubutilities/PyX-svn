Structure of modules and classes in the graph subdirectory

TODO: - separate all interface definitions from implemenations (and finish all interface definitions)
      - remove __implements__; its confuses most source code readers
      - description of data.py is not complete below


graph/axis/tick.py

    rational [a very basic and limited rational number type]
    tick(rational) [tick position based on a rational number (includes interface definition)]

    (contains two helper functions to build and handle a list of ticks: mergeticklists and maxlevels)


graph/axis/parter.py

    _Iparter [interface definition]

    linear [parter for linear axes]
    autolinear [automatic parter for linear axes (default parter for linear axes)]

    preexp [helper class for defining tick positions on a logarithmic scale]

    logarithmic(linparter) [parter for logarithmic axes]
    autologarithmic(logparter) [automatic parter for logarithmix axes (default parter for logarithmic axes)]

    shortcuts: - lin = linear
               - autolin = autolinear
               - log = logarithmic
               - autolog = autologarithmic


graph/axis/texter.py

    _Itexter [interface definition]

    rational [implements _Itexter to create rational number labels]
    decimal [implements _Itexter to create decimal labels]
    exponential [implements _Itexter to create exponentential labels]
    default [implements _Itexter by mixing decimal and exponential texter (default texter for regular axes)]


graph/axis/painter.py

    _Iaxispainter [interface definition]
    _Iaxispos [interface definition]

    axiscanvas(canvas.canvas) [canvas to draw axis on (includes interface definition)]
    rotatetext [class to calculate rotation operation for a given tick direction (includes interface definition)]

    _axispos [partially implements _Iaxispos interface]
    pathaxispos(_axispos) [implements _Iaxispos for an arbitrary path]

    _title [implements _Iaxis (shared task of plotting axis titles in derived axispainters)]

    geometricseries(attr.changeattr) [a changeable attribute resulting in a geometric series]
    ticklength(geometricseries) [geometric series for tick lengths]

    plain(_title) [default axis painter for regular axes (linaxis, logaxis)]
    linked(plain) [default axis painter for linked regular axes (turns off some features)]

    subaxispos [implements _Iaxispos for subaxes, which occure in split axes and bar axes)]

    split(_title) [default axis painter for split axes]
    omitsubaxispainter [helper class for linksplitaxis argument handling]
    linkedsplit(split) [default axis painter for linked split axes]

    bar(_title) [default axis painter for bar axes]
    linkedbar(bar) [default axis painter for linked bar axes]


graph/axis/rater.py

    cuberater [rater for values like the number of ticks etc. (includes interface definition)]

    distancerater [rater for optimal distances of boxes (includes interface definition)]

    rater [rater for ticks and axis layout (includes interface definition)]

    linear [rater with predefined constructor arguments suitable for a linear axis]

    logarithmic [rater with predefined constructor arguments suitable for a logarithmic axis]

    shortcuts: - lin = linear
               - log = logarithmic


graph/axis/axis.py

    _Imap [interface definition]
    _Iaxis [interface definition]

    _linmap [implements _Imap for a linear axis]
    _logmap [implements _Imap for a logarithmic axis]

    _axis [partitionally implements _Iaxis; _Imap is missing to fully implement _Iaxis]

    linear(_axis, _linmap) [implements _Iaxis for a linear axis]
    logarithmic(_axis, _linmap) [implements _Iaxis for a logarithmic axis]

    _linked [implements _Iaxis by linking to a regular axis instance, but not taking into account an axis divisor]
    linked [implements _Iaxis by linking to a regular]

    split [implements _Iaxis for a splitable axis]
    linkedsplit(_linked) [implements _Iaxis by linking to a splitaxis instance]

    bar [implements _Iaxis for a bar axis]
    linkedbar(_linked) [implements _Iaxis by linking to a baraxis instance]

    (helper function pathaxis to draw a axis at an arbitrary path)

    shortcuts: - lin = linear
               - log = logarithmic
               - pyx.graph.axis.linear = pyx.graph.axis.axis.linear
               - pyx.graph.axis.lin = pyx.graph.axis.axis.lin
               - pyx.graph.axis.logarithmic = pyx.graph.axis.axis.logarithmic
               - pyx.graph.axis.log = pyx.graph.axis.axis.log
               - pyx.graph.axis.linked = pyx.graph.axis.axis.linked
               - pyx.graph.axis.split = pyx.graph.axis.axis.split
               - pyx.graph.axis.linkedsplit = pyx.graph.axis.axis.linkedsplit
               - pyx.graph.axis.bar = pyx.graph.axis.axis.bar
               - pyx.graph.axis.linkedbar = pyx.graph.axis.axis.linkedbar
               - pyx.graph.axis.pathaxis = pyx.graph.axis.axis.pathaxis


key.py

    [interface definition missing]

    class key [graph key painter]


style.py

    [interface definition missing]

    _style [collection of common operations performed by styles]

    symbolline(_style) [style for drawing symbols with errorbars and lines]
    line(symbolline) [reduction of symbollines to lines only]
    symbol(symbolline) [reduction of symbollines to symbols with errorbars only]
    text(symbol) [extend symbol style to show given text at the symbols]
    arrow(_style) [draw arrows with given size and direction]
    rect(_style) [draw rectangles with given color]
    bar(_style) [draw bars in a bar graph]


data.py

    [interface definition missing]

    list [data from a list]
    data [data from another data instance]
    file [data from a file]
    function [data from a function]
    paramfunction [data from a parametric function]


graph.py

    [interface definition missing -- we don't really have interfaces here, but we may introduce some generic
    behaviour of all graphs (domethods, access to axes and positions, etc.)]

    lineaxispos [implements _Iaxispos for a straight line]
    lineaxisposlinegrid(lineaxispos) [like _Iaxispos but adds grid lines for a x-y-graph]
    graphxy(canvas.canvas) [x-y-graph]

    shortcuts: - pyx.graph.graphxy = pyx.graph.graph.graphxy


timeaxis.py (experimental code, needs python 2.3)

    _timemap [implements _Imap for datetime instances]
    timetick(datetime.datetime) [tick position based on datetime]
    timetexter [implements _Itexter as a primitiv texter for datetime instances]
    timeaxis(axis._axis, _timemap) [implements _Iaxis for a time axis]

NOTE: The timeaxis should be kept as separately as possible. It needs Python 2.3 and dateutils
      (dateutils is not yet needed while we currently also lack (auto-)partitioning of a timeaxis;
      there is an ongoing discussion with Gustavo Niemeyer about some patches).

